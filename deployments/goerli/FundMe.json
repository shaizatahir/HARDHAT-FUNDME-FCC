{
  "address": "0xB11ED36fFd2FFd2D2832109A994E45495eA0837A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x06641f873867b3d7e222eedd7eccbde1079e22400fc4b4f742e420389123e731",
  "receipt": {
    "to": null,
    "from": "0xFddb943e7E891B5bFD8FE72d3a1BdfC09A615eF6",
    "contractAddress": "0xB11ED36fFd2FFd2D2832109A994E45495eA0837A",
    "transactionIndex": 93,
    "gasUsed": "1024797",
    "logsBloom": "0x
    "blockHash": "0x8ec78e07e0c92b48c904b4583671dc5b9b0f9be2e71d9eb6c81e88efb6a65edf",
    "transactionHash": "0x06641f873867b3d7e222eedd7eccbde1079e22400fc4b4f742e420389123e731",
    "logs": [],
    "blockNumber": 8567037,
    "cumulativeGasUsed": "14047901",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 2,
  "solcInputHash": "bc553702b74e860915a031ef980f6efa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Shaiza Tahir\",\"details\":\"This contract implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds the contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// Get funds from users\\n// withdraw funds\\n// set a minimum funding value in USD\\n\\n// SPDX-License-Identifier: MIT\\n//pragma\\npragma solidity ^0.8.8;\\n//imports\\nimport \\\"./PriceConverter.sol\\\";\\n// Error codes\\nerror FundMe__NotOwner();\\n\\n// Interfaces, Libraries, Contract\\n\\n/**\\n * @title A contract for crowd funding\\n * @author Shaiza Tahir\\n * @notice This contract is to demo a sample funding contract\\n * @dev This contract implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type declarations\\n    using PriceConverter for uint256;\\n\\n    // State variables\\n    uint256 public constant MINIMUM_USD = 50 * 1e18; // 1*10**18\\n    // 21,415-gas constant\\n    // 23,515-gas non-constant\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n\\n    address private immutable i_owner;\\n    // 21,508-gas immutable\\n    // 23,644-gas non-immutable\\n\\n    AggregatorV3Interface public s_priceFeed;\\n    // Events, modifiers\\n    modifier onlyOwner() {\\n        //require(msg.sender == i_owner, \\\"Sender is not owner\\\");\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        } // revert saves alot of gas\\n        _;\\n    }\\n\\n    // Funtions Order:\\n    // constructor\\n    // receive\\n    // fallback\\n    // external\\n    // public\\n    // internal\\n    // private\\n    // view / pure\\n\\n    // we can change chains\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // if data is empty\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    // if data is sent with a transaction, and no function specified\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     * @notice This function funds the contract\\n     * @dev This implements price feeds as our library\\n     */\\n    function fund() public payable {\\n        // want to be able to sent a minimum amount in USD\\n        // 1. How do we sent ETH to this contract\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"Didn't sent enough\\\"\\n        ); // 1e18 == 1 * 10 *18 == 1000000000000000000\\n        // 18 decimals\\n        // What is reverting?\\n        // undo any actions before, and send remaining gas back\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        // reset the array\\n        s_funders = new address[](0);\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(success);\\n    }\\n\\n    // view / pure\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunders(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n    function getAddressToAmountFunded(address funder) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\\n// 5 steps to solve any coding problem\\n// 1. Tinker and experiment\\n// 2. check the docs\\n// 3. do web search\\n// 4. ask question on forum & Q&A sites\\n// 5. Join and strengthen the comunity and tool\\n\",\"keccak256\":\"0x4fbac6acbd06bf9ba6a1065d6b436a698d8b5900144a3642d41595bdad835b3f\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"//  SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\n// Libraries are similar to contracts, but you can't declare any state variable and you can't send ether.\\r\\n// A library is embedded into the contract if all library functions are internal.\\r\\n\\r\\nlibrary PriceConverter {\\r\\n    function getPrice(\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        // ABI\\r\\n        // Address 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\r\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n        //     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\r\\n        // );\\r\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\r\\n        return uint256(price * 1e10); // 1 * 10 == 10000000000\\r\\n    }\\r\\n\\r\\n\\r\\n    function getConversionRate(\\r\\n        uint256 ethAmount,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        // 3000_000000000000000000 ETH / USD price\\r\\n        // 1_000000000000000000\\r\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // without division it will have 36 zeros at the end\\r\\n        return ethAmountInUsd;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb3c8c947086deb818de339deda95a1c1adb04a1b0ff6e4e3c2b9d68d47ebf155\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012aa380380620012aa833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c61112b6200017f600039600081816103c8015281816106170152610667015261112b6000f3fe60806040526004361061008a5760003560e01c80636b69a592116100595780636b69a59214610152578063893d20e81461017d5780639e87a5cd146101a8578063b60d4288146101d3578063be2693f0146101dd57610099565b80630343fb25146100a35780630ec3b027146100e05780633a7b6c741461010b5780633ccfd60b1461014857610099565b36610099576100976101e7565b005b6100a16101e7565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610ab9565b610310565b6040516100d79190610aff565b60405180910390f35b3480156100ec57600080fd5b506100f5610359565b6040516101029190610b79565b60405180910390f35b34801561011757600080fd5b50610132600480360381019061012d9190610bc0565b61037f565b60405161013f9190610bfc565b60405180910390f35b6101506103c6565b005b34801561015e57600080fd5b50610167610606565b6040516101749190610aff565b60405180910390f35b34801561018957600080fd5b50610192610613565b60405161019f9190610bfc565b60405180910390f35b3480156101b457600080fd5b506101bd61063b565b6040516101ca9190610b79565b60405180910390f35b6101db6101e7565b005b6101e5610665565b005b6802b5e3af16b1880000610226600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108d390919063ffffffff16565b1015610267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025e90610c74565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080828154811061039457610393610c94565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461044b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104f65760008082815481106104705761046f610c94565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104ee90610cf2565b91505061044e565b50600067ffffffffffffffff81111561051257610511610d3b565b5b6040519080825280602002602001820160405280156105405781602001602082028036833780820191505090505b50600090805190602001906105569291906109af565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161057d90610d9b565b60006040518083038185875af1925050503d80600081146105ba576040519150601f19603f3d011682016040523d82523d6000602084013e6105bf565b606091505b5050905080610603576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fa90610dfc565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106ea576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561076d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610723575b5050505050905060005b81518110156107f857600082828151811061079557610794610c94565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107f090610cf2565b915050610777565b50600067ffffffffffffffff81111561081457610813610d3b565b5b6040519080825280602002602001820160405280156108425781602001602082028036833780820191505090505b50600090805190602001906108589291906109af565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161087f90610d9b565b60006040518083038185875af1925050503d80600081146108bc576040519150601f19603f3d011682016040523d82523d6000602084013e6108c1565b606091505b50509050806108cf57600080fd5b5050565b6000806108df8361090f565b90506000670de0b6b3a764000085836108f89190610e1c565b6109029190610ea5565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561095857600080fd5b505afa15801561096c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109909190610f63565b5050509150506402540be400816109a79190610fde565b915050919050565b828054828255906000526020600020908101928215610a28579160200282015b82811115610a275782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109cf565b5b509050610a359190610a39565b5090565b5b80821115610a52576000816000905550600101610a3a565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a8682610a5b565b9050919050565b610a9681610a7b565b8114610aa157600080fd5b50565b600081359050610ab381610a8d565b92915050565b600060208284031215610acf57610ace610a56565b5b6000610add84828501610aa4565b91505092915050565b6000819050919050565b610af981610ae6565b82525050565b6000602082019050610b146000830184610af0565b92915050565b6000819050919050565b6000610b3f610b3a610b3584610a5b565b610b1a565b610a5b565b9050919050565b6000610b5182610b24565b9050919050565b6000610b6382610b46565b9050919050565b610b7381610b58565b82525050565b6000602082019050610b8e6000830184610b6a565b92915050565b610b9d81610ae6565b8114610ba857600080fd5b50565b600081359050610bba81610b94565b92915050565b600060208284031215610bd657610bd5610a56565b5b6000610be484828501610bab565b91505092915050565b610bf681610a7b565b82525050565b6000602082019050610c116000830184610bed565b92915050565b600082825260208201905092915050565b7f4469646e27742073656e7420656e6f7567680000000000000000000000000000600082015250565b6000610c5e601283610c17565b9150610c6982610c28565b602082019050919050565b60006020820190508181036000830152610c8d81610c51565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cfd82610ae6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d3057610d2f610cc3565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d85600083610d6a565b9150610d9082610d75565b600082019050919050565b6000610da682610d78565b9150819050919050565b7f63616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610de6600b83610c17565b9150610df182610db0565b602082019050919050565b60006020820190508181036000830152610e1581610dd9565b9050919050565b6000610e2782610ae6565b9150610e3283610ae6565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e6b57610e6a610cc3565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610eb082610ae6565b9150610ebb83610ae6565b925082610ecb57610eca610e76565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ef581610ed6565b8114610f0057600080fd5b50565b600081519050610f1281610eec565b92915050565b6000819050919050565b610f2b81610f18565b8114610f3657600080fd5b50565b600081519050610f4881610f22565b92915050565b600081519050610f5d81610b94565b92915050565b600080600080600060a08688031215610f7f57610f7e610a56565b5b6000610f8d88828901610f03565b9550506020610f9e88828901610f39565b9450506040610faf88828901610f4e565b9350506060610fc088828901610f4e565b9250506080610fd188828901610f03565b9150509295509295909350565b6000610fe982610f18565b9150610ff483610f18565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561103357611032610cc3565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110705761106f610cc3565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110ad576110ac610cc3565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110ea576110e9610cc3565b5b82820290509291505056fea2646970667358221220edfbf4023bcba53958ddf7995a4c6621d6332e4e43edbdd183355634abe3eff764736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c80636b69a592116100595780636b69a59214610152578063893d20e81461017d5780639e87a5cd146101a8578063b60d4288146101d3578063be2693f0146101dd57610099565b80630343fb25146100a35780630ec3b027146100e05780633a7b6c741461010b5780633ccfd60b1461014857610099565b36610099576100976101e7565b005b6100a16101e7565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610ab9565b610310565b6040516100d79190610aff565b60405180910390f35b3480156100ec57600080fd5b506100f5610359565b6040516101029190610b79565b60405180910390f35b34801561011757600080fd5b50610132600480360381019061012d9190610bc0565b61037f565b60405161013f9190610bfc565b60405180910390f35b6101506103c6565b005b34801561015e57600080fd5b50610167610606565b6040516101749190610aff565b60405180910390f35b34801561018957600080fd5b50610192610613565b60405161019f9190610bfc565b60405180910390f35b3480156101b457600080fd5b506101bd61063b565b6040516101ca9190610b79565b60405180910390f35b6101db6101e7565b005b6101e5610665565b005b6802b5e3af16b1880000610226600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108d390919063ffffffff16565b1015610267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025e90610c74565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080828154811061039457610393610c94565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461044b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104f65760008082815481106104705761046f610c94565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104ee90610cf2565b91505061044e565b50600067ffffffffffffffff81111561051257610511610d3b565b5b6040519080825280602002602001820160405280156105405781602001602082028036833780820191505090505b50600090805190602001906105569291906109af565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161057d90610d9b565b60006040518083038185875af1925050503d80600081146105ba576040519150601f19603f3d011682016040523d82523d6000602084013e6105bf565b606091505b5050905080610603576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fa90610dfc565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106ea576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561076d57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610723575b5050505050905060005b81518110156107f857600082828151811061079557610794610c94565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107f090610cf2565b915050610777565b50600067ffffffffffffffff81111561081457610813610d3b565b5b6040519080825280602002602001820160405280156108425781602001602082028036833780820191505090505b50600090805190602001906108589291906109af565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161087f90610d9b565b60006040518083038185875af1925050503d80600081146108bc576040519150601f19603f3d011682016040523d82523d6000602084013e6108c1565b606091505b50509050806108cf57600080fd5b5050565b6000806108df8361090f565b90506000670de0b6b3a764000085836108f89190610e1c565b6109029190610ea5565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561095857600080fd5b505afa15801561096c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109909190610f63565b5050509150506402540be400816109a79190610fde565b915050919050565b828054828255906000526020600020908101928215610a28579160200282015b82811115610a275782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109cf565b5b509050610a359190610a39565b5090565b5b80821115610a52576000816000905550600101610a3a565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a8682610a5b565b9050919050565b610a9681610a7b565b8114610aa157600080fd5b50565b600081359050610ab381610a8d565b92915050565b600060208284031215610acf57610ace610a56565b5b6000610add84828501610aa4565b91505092915050565b6000819050919050565b610af981610ae6565b82525050565b6000602082019050610b146000830184610af0565b92915050565b6000819050919050565b6000610b3f610b3a610b3584610a5b565b610b1a565b610a5b565b9050919050565b6000610b5182610b24565b9050919050565b6000610b6382610b46565b9050919050565b610b7381610b58565b82525050565b6000602082019050610b8e6000830184610b6a565b92915050565b610b9d81610ae6565b8114610ba857600080fd5b50565b600081359050610bba81610b94565b92915050565b600060208284031215610bd657610bd5610a56565b5b6000610be484828501610bab565b91505092915050565b610bf681610a7b565b82525050565b6000602082019050610c116000830184610bed565b92915050565b600082825260208201905092915050565b7f4469646e27742073656e7420656e6f7567680000000000000000000000000000600082015250565b6000610c5e601283610c17565b9150610c6982610c28565b602082019050919050565b60006020820190508181036000830152610c8d81610c51565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cfd82610ae6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d3057610d2f610cc3565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d85600083610d6a565b9150610d9082610d75565b600082019050919050565b6000610da682610d78565b9150819050919050565b7f63616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610de6600b83610c17565b9150610df182610db0565b602082019050919050565b60006020820190508181036000830152610e1581610dd9565b9050919050565b6000610e2782610ae6565b9150610e3283610ae6565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e6b57610e6a610cc3565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610eb082610ae6565b9150610ebb83610ae6565b925082610ecb57610eca610e76565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ef581610ed6565b8114610f0057600080fd5b50565b600081519050610f1281610eec565b92915050565b6000819050919050565b610f2b81610f18565b8114610f3657600080fd5b50565b600081519050610f4881610f22565b92915050565b600081519050610f5d81610b94565b92915050565b600080600080600060a08688031215610f7f57610f7e610a56565b5b6000610f8d88828901610f03565b9550506020610f9e88828901610f39565b9450506040610faf88828901610f4e565b9350506060610fc088828901610f4e565b9250506080610fd188828901610f03565b9150509295509295909350565b6000610fe982610f18565b9150610ff483610f18565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561103357611032610cc3565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110705761106f610cc3565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110ad576110ac610cc3565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110ea576110e9610cc3565b5b82820290509291505056fea2646970667358221220edfbf4023bcba53958ddf7995a4c6621d6332e4e43edbdd183355634abe3eff764736f6c63430008080033",
  "devdoc": {
    "author": "Shaiza Tahir",
    "details": "This contract implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as our library"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds the contract"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 66,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}